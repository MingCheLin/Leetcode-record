### 
class Solution:
    def numEnclaves(self, grid: List[List[int]]) -> int:
        def fill(i, j):
            if i < 0 or i >= m or j < 0 or j >= n or grid[i][j] == 0:
                return
            grid[i][j] = 0
            fill(i-1, j)
            fill(i+1, j)
            fill(i, j+1)
            fill(i, j-1)

        m = len(grid)
        n = len(grid[0])
        for i in range(m):
            fill(i ,0)
            fill(i, n-1)
        for j in range(n):
            fill(0, j)
            fill(m-1, j)
        return sum(sum(r) for r in grid)
### 
class Solution:
    def numEnclaves(self, grid: List[List[int]]) -> int:
        def fill(i, j):
            if i < 0 or i >= n or j < 0 or j >= m:
                return 0, 0
            if grid[i][j] == 1:
                grid[i][j] = 2
                x1, y1 = fill(i+1, j)
                x2, y2 = fill(i-1, j)
                x3, y3 = fill(i, j+1)
                x4, y4 = fill(i, j-1)
                return x1 + x2 + x3 + x4 + 1, y1 * y2 * y3 * y4
            return 0, 1
        res = 0
        n = len(grid)
        m = len(grid[0])
        for i in range(n):
            for j in range(m):
                x, y = fill(i, j)
                res += x* y
        return res
