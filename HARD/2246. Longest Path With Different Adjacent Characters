class Solution:
    def longestPath(self, parent, s):
        children = [[] for _ in range(len(s))]
        for i,j in enumerate(parent[1:], start = 1):
            children[j].append(i)
            
        def dfs(i):
            candi = [0, 0]
            for j in children[i]:
                cur = dfs(j)
                if (s[i] != s[j]) and (cur > candi[0]):
                    candi[0] = cur
                    candi.sort()
            
            self.res = max(self.res, sum(candi) + 1)
            return max(candi) + 1
        self.res = 0
        dfs(0)
        return self.res


## right result but time exceeded
class Solution:
    def longestPath(self, parent: List[int], s: str) -> int:
        ans = 1
        n = len(parent)
        through = [0] * n
        path_len = [0] * n
        leaf = [1] * len(parent)
        max_path = [[0, 0] for _ in range(n)]
        for i, p in enumerate(parent[1:], start = 1):
            if s[p] != s[i]:
                through[i] = 1
            leaf[p] -=  1

        while leaf[0] != 1:
            for i, l in enumerate(leaf):
                if l == 1:     
                    path_len[i] = max_path[i][1] +1
                    if through[i]:
                        p = parent[i]
                        max_path[p][0] = max(max_path[p][0], path_len[i])
                        max_path[p].sort()
                    ans = max(ans, sum(max_path[i])+1)
                    leaf[i] = 0
                    leaf[parent[i]] += 1
        ans = max(ans, sum(max_path[0])+1)
        return ans
